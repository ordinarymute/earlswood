{"version":3,"sources":["components/navbar.js","components/twitch/twitchPanels.js","components/twitch/twitchEmbed.js","components/schedule/schedule.js","components/sponsors/sponsors.js","app.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","id","src","alt","href","target","icon","faHeart","TwitchPanels","faYoutube","size","faTwitter","faInstagram","faDiscord","EmbeddedTwitch","script","document","createElement","setAttribute","addEventListener","window","Twitch","Embed","props","targetID","body","appendChild","this","Component","Schedule","Sponsors","App","width","height","channel","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0635374a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faHeart} from '@fortawesome/free-solid-svg-icons';\r\nimport {Link, NavLink} from 'react-router-dom';\r\n\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"nav-wrapper\">\r\n      <div className=\"container\">\r\n        <Link to=\"/\"id=\"brand-logo\">\r\n          <img src=\"img/wolf_pack_logo.png\" alt=\"Mute Words\" />\r\n          <h1>EARLSWOOD</h1>\r\n        </Link>\r\n        <div id=\"nav-links\">\r\n          <ul className=\"right\">\r\n            <li><a href=\"https://www.twitch.tv/earlswood\" target=\"_blank\" className=\"twitch-button\">\r\n              <span className=\"twitch-button-left\">Follow</span>\r\n              <span className=\"twitch-button-right\"><FontAwesomeIcon icon={faHeart} /></span>\r\n            </a></li>\r\n            <li><a href=\"https://www.twitch.tv/subs/earlswood\" target=\"_blank\" className=\"twitch-button\">\r\n              <span className=\"twitch-button-left\">Subscribe</span>\r\n              <span className=\"twitch-button-right\">$4.99</span>\r\n            </a></li>\r\n            <li><NavLink to=\"/\">Home</NavLink></li>\r\n            <li><NavLink to=\"#watch\">Watch</NavLink></li>\r\n            <li><NavLink to=\"/\">Schedule</NavLink></li>\r\n            <li><NavLink to=\"/\">Sponsors</NavLink></li>\r\n            <li><NavLink to=\"/\">Contact</NavLink></li>\r\n            <li><NavLink to=\"/\">Merch</NavLink></li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faYoutube, faTwitter, faInstagram, faDiscord} from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst TwitchPanels = () => {\r\n  return (\r\n    <div className=\"twitch-panels-container\">\r\n      <a href=\"https://www.youtube.com/channel/UCI9A7m0C-U2xv4PSPNl7WLA\" className=\"panel-link\" target=\"_blank\"> \r\n        <div className=\"inner-panel-container\">\r\n          <div className=\"panel-icon\"><FontAwesomeIcon icon={faYoutube} size=\"4x\" /></div>\r\n          <div className=\"panel-text\">\r\n            <h3>YouTube</h3>\r\n            <p>Wolf Pack Youtube Highlights & IRL Videos now being uploaded weekly!</p>\r\n          </div>\r\n        </div>\r\n      </a>\r\n      <a href=\"https://twitter.com/EarlswoodTwitch\" className=\"panel-link\" target=\"_blank\">\r\n        <div className=\"inner-panel-container\">\r\n          <span className=\"panel-icon\"><FontAwesomeIcon icon={faTwitter} size=\"4x\" /></span>\r\n          <span className=\"panel-text\">\r\n            <h3>Twitter</h3>\r\n            <p>Check out my Twitter for updates on the stream!</p>\r\n          </span>\r\n        </div>\r\n      </a>\r\n      <div className=\"clear\"></div>\r\n      <a href=\"https://www.instagram.com/earlswoodtwitch/\" className=\"panel-link\" target=\"_blank\">\r\n        <div className=\"inner-panel-container\">\r\n          <span className=\"panel-icon\"><FontAwesomeIcon icon={faInstagram} size=\"4x\" /></span>\r\n          <span className=\"panel-text\">\r\n            <h3>Instagram</h3>\r\n            <p>Twitch Streamer. YouTuber. The hair is real.</p>\r\n          </span>\r\n        </div>\r\n      </a>\r\n      <a href=\"https://discord.gg/UhrENu3\" className=\"panel-link\" target=\"_blank\"> \r\n        <div className=\"inner-panel-container\">\r\n          <span className=\"panel-icon\"><FontAwesomeIcon icon={faDiscord} size=\"4x\" /></span>\r\n          <span className=\"panel-text\">\r\n            <h3>Discord</h3>\r\n            <p>Please check out the Community Discord!<br /> A place welcome for everyone, to come chill, chat and share your channels!</p>\r\n          </span>\r\n        </div>\r\n      </a>\r\n      <div className=\"clear\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TwitchPanels;","import React, {Component} from \"react\";\r\nimport TwitchPanels from './twitchPanels';\r\n\r\nconst EMBED_URL = \"https://embed.twitch.tv/embed/v1.js\";\r\n\r\nclass EmbeddedTwitch extends Component {\r\n  componentDidMount() {\r\n    const script = document.createElement(\"script\");\r\n    script.setAttribute(\r\n      \"src\",\r\n      EMBED_URL\r\n    );\r\n    script.addEventListener(\"load\", () => {\r\n      let embed = new window.Twitch.Embed(this.props.targetID, {...this.props});\r\n    });\r\n    document.body.appendChild(script);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"inner-container\">\r\n        <div id=\"watch\"></div>\r\n        <div id={this.props.targetID}></div>\r\n        <TwitchPanels />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default EmbeddedTwitch;","import React from 'react';\r\n\r\nconst Schedule = () => {\r\n  return (\r\n    <div className=\"inner-container\">\r\n      <h2>Schedule</h2>\r\n      <p>Below is the stream schedule. All times are BST. Times are subject to change so the best way to stay up to date is to follow on \r\n        <a href=\"https://twitter.com/EarlswoodTwitch\"> Twitter</a>\r\n      </p>\r\n      <div className=\"schedule-container\">\r\n        <div className=\"schedule-outer\">\r\n          <div className=\"schedule-inner\">\r\n            <h4>Monday</h4>\r\n            <p>7PM - 2AM<br />&nbsp;</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"schedule-outer\">\r\n          <div className=\"schedule-inner\">\r\n            <h4>Tuesday</h4>\r\n            <p>OFF/Supporting<br />&nbsp;</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"schedule-outer\">\r\n          <div className=\"schedule-inner\">\r\n            <h4>Wednesday</h4>\r\n            <p>*OFF/YouTube Film Day<br />&nbsp;</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"schedule-outer\">\r\n          <div className=\"schedule-inner\">\r\n            <h4>Thursday</h4>\r\n            <p>12PM - 5PM<br />7PM - 2AM</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"schedule-outer\">\r\n          <div className=\"schedule-inner\">\r\n            <h4>Friday</h4>\r\n            <p>12PM - 5PM<br />7PM - 2AM</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"schedule-outer\">\r\n          <div className=\"schedule-inner\">\r\n            <h4>Saturday</h4>\r\n            <p>12PM - 6PM<br />&nbsp;</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"schedule-outer\">\r\n          <div className=\"schedule-inner\">\r\n            <h4>Sunday</h4>\r\n            <p>7PM - 2AM<br />&nbsp;</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Schedule;","import React from 'react';\r\n\r\nconst Sponsors = () => {\r\n  return (\r\n    <div className=\"inner-container\">\r\n      <h1>Sponsors</h1>\r\n      <div className=\"sponsors\">\r\n        <a href=\"\"><img src=\"\" alt=\"\"/></a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sponsors;","import React, {Component} from \"react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport Navbar from \"./components/navbar\";\r\nimport EmbeddedTwitch from \"./components/twitch/twitchEmbed\";\r\nimport Schedule from './components/schedule/schedule';\r\nimport Sponsors from './components/sponsors/sponsors';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <div id=\"App\" className=\"App\">\r\n          <header>\r\n            <Navbar />\r\n          </header>\r\n          <section id=\"home\">\r\n            <div id=\"banner\">\r\n              <img src=\"img/wolf_pack_community_background.png\" alt=\"Mute Banner\" />\r\n            </div>\r\n            <EmbeddedTwitch targetID=\"twitch-embed\" width=\"1200\" height=\"480\" channel=\"earlswood\" />\r\n          </section>\r\n          <section id=\"schedule\">\r\n            <Schedule />\r\n          </section>\r\n          <section id=\"Sponsors\">\r\n            <Sponsors />\r\n          </section>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './components/twitch/twitch.css';\nimport './components/navbar.css';\nimport './components/schedule/schedule.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}